

CREATE TABLE EMPLOYEES
(
    E_ID NUMBER,
    E_NAME VARCHAR2(160) UNIQUE NOT NULL,
    E_FNAME VARCHAR (100),
    E_LNAME VARCHAR (100),
    E_PASS VARCHAR2(160) NOT NULL,
    E_MANAGER NUMBER DEFAULT 0,
    E_PHONE VARCHAR(30),
    E_ADDRESS VARCHAR(200),
    E_EMAIL VARCHAR(100),
    CONSTRAINT PK_E_ID PRIMARY KEY (E_ID)
);

CREATE TABLE TICKETS
(
    T_ID NUMBER PRIMARY KEY,
    E_ID NUMBER NOT NULL,
    T_TITLE VARCHAR2(100),
    T_DESC VARCHAR2(300),
    R_BOOLEAN NUMBER DEFAULT 0,
    RM_ID NUMBER DEFAULT 0,
    CONSTRAINT FK_T_EID FOREIGN KEY (E_ID) REFERENCES EMPLOYEES (E_ID) ON DELETE CASCADE  
);

CREATE TABLE IMAGES
(
    I_ID NUMBER PRIMARY KEY,
    T_ID NUMBER NOT NULL,
    IMG BLOB NOT NULL,
    CONSTRAINT FK_I_TID FOREIGN KEY (T_ID) REFERENCES TICKETS (T_ID) ON DELETE CASCADE
);



CREATE SEQUENCE SQ_EMPLOYEE_PK START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
    SELECT SQ_EMPLOYEE_PK.NEXTVAL INTO :NEW.E_ID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_TICKET_PK START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_TICKET
BEFORE INSERT ON TICKETS
FOR EACH ROW
BEGIN
    SELECT SQ_TICKET_PK.NEXTVAL INTO :NEW.T_ID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_IMAGE_PK START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_IMAGE
BEFORE INSERT ON IMAGES
FOR EACH ROW
BEGIN
    SELECT SQ_IMAGE_PK.NEXTVAL INTO :NEW.I_ID FROM DUAL;
END;
/

CREATE OR REPLACE PROCEDURE SP_CREATE_EMPLOYEE
(USERNAME IN VARCHAR2,FNAME IN VARCHAR2, LNAME IN VARCHAR2, USERPASS IN VARCHAR2, MNGR IN NUMBER) AS
BEGIN
    --SAVEPOINT; --Needed for rollback if you want to test the procedure without commiting data
    INSERT INTO EMPLOYEES (E_ID,E_NAME,E_FNAME,E_LNAME,E_PASS, E_MANAGER) VALUES (1,USERNAME,FNAME,LNAME,USERPASS, MNGR);

    --ROLLBACK
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE SP_UPDATE_EMPLOYEE
(USERNAME IN VARCHAR2,FNAME IN VARCHAR2, LNAME IN VARCHAR2, USERPASS IN VARCHAR2, MNGR IN NUMBER, PHON IN VARCHAR2, ADDR IN VARCHAR2, EMAIL IN VARCHAR2) AS
BEGIN
    
    UPDATE EMPLOYEES SET E_FNAME = FNAME ,E_LNAME = LNAME, E_PASS = USERPASS, E_MANAGER = MNGR, E_PHONE = PHON, E_ADDRESS = ADDR, E_EMAIL = EMAIL WHERE E_NAME = USERNAME;
    
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE SP_DEL_EMPLOYEE
(USERNAME IN VARCHAR2) AS
BEGIN
    DELETE FROM EMPLOYEES WHERE E_NAME = USERNAME;

    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE SP_CREATE_BLANKTICKET
(EID IN NUMBER) AS
BEGIN
    --SAVEPOINT; --Needed for rollback if you want to test the procedure without commiting data
    INSERT INTO TICKETS (T_ID,E_ID,T_TITLE,T_DESC,R_BOOLEAN,RM_ID) VALUES (1,EID,'','',0,0);

    --ROLLBACK
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE SP_CREATE_TICKET
(EID IN NUMBER,TKTITLE IN VARCHAR2, TKDESC IN VARCHAR2) AS
BEGIN
    --SAVEPOINT; --Needed for rollback if you want to test the procedure without commiting data
    INSERT INTO TICKETS (T_ID,E_ID,T_TITLE,T_DESC,R_BOOLEAN,RM_ID) VALUES (1,EID,TKTITLE,TKDESC,0,0);

    --ROLLBACK
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE SP_UPDATE_TICKET
(TID IN NUMBER, TKTITLE IN VARCHAR2, TDESC IN VARCHAR2, DONE IN NUMBER, MANAGERID IN NUMBER) AS
BEGIN
    
    UPDATE TICKETS SET T_TITLE = TKTITLE, T_DESC = TDESC, R_BOOLEAN = DONE, RM_ID = MANAGERID WHERE T_ID = TID;
    
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE SP_DEL_TICKET
(TID IN NUMBER) AS
BEGIN
    DELETE FROM TICKETS WHERE T_ID = TID;

    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE SP_CREATE_IMAGE
(TID IN NUMBER, IMAGE IN BLOB) AS
BEGIN
    --SAVEPOINT; --Needed for rollback if you want to test the procedure without commiting data
    INSERT INTO IMAGES (I_ID,T_ID,IMG) VALUES (1,TID, IMAGE);

    --ROLLBACK
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE SP_DEL_IMAGE
(IID IN NUMBER) AS
BEGIN
    DELETE FROM IMAGES WHERE I_ID = IID;

    COMMIT;
END;
/

COMMIT;

DELETE FROM EMPLOYEES;
INSERT INTO EMPLOYEES (E_ID,E_NAME,E_FNAME,E_LNAME,E_PASS,E_MANAGER) VALUES (1,'sysadmin','system','administrator','1234',1);
INSERT INTO EMPLOYEES (E_ID,E_NAME,E_FNAME,E_LNAME,E_PASS,E_MANAGER) VALUES (1,'joberholtzer','John','Oberholtzer','1234',1);
INSERT INTO EMPLOYEES (E_ID,E_NAME,E_FNAME,E_LNAME,E_PASS,E_MANAGER) VALUES (1,'kbutterfield','Kyle','Butterfield','1234',0);
INSERT INTO EMPLOYEES (E_ID,E_NAME,E_FNAME,E_LNAME,E_PASS,E_MANAGER) VALUES (1,'mbedoya','Mark','Bedoya','1234',0);
INSERT INTO EMPLOYEES (E_ID,E_NAME,E_FNAME,E_LNAME,E_PASS,E_MANAGER) VALUES (1,'dcheung','Derrick','Cheung','1234',0);
COMMIT;

INSERT INTO TICKETS VALUES (1,1,'Travel','',0,0);
INSERT INTO TICKETS VALUES (1,1,'Housing','',0,0);
INSERT INTO TICKETS VALUES (1,1,'Per Diem','',1,1);
COMMIT;
